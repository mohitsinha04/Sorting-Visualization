{"ast":null,"code":"import _slicedToArray from \"/Users/mohitsinha/Downloads/Sorting-Visualizer-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mohitsinha/Downloads/Sorting-Visualizer-master/src/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport './SortingVisualisa.css';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/mergeSort'; //import {getHeapSortAnimations} from '../SortingAlgorithms/';\n\nimport { getQuickSortAnimations } from '../SortingAlgorithms/quickSort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/insertionSort';\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/selectionsort';\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/bubblesort';\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\n\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\n\nconst ANIMATION_SPEED_MS = 5; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 350; i++) {\n      array.push(randomIntformIntervals(5, 600));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const _getMergeSortAnimatio = getMergeSortAnimations(this.state.array),\n          _getMergeSortAnimatio2 = _slicedToArray(_getMergeSortAnimatio, 2),\n          animations = _getMergeSortAnimatio2[0],\n          sortArray = _getMergeSortAnimatio2[1];\n\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const _animations$i = _slicedToArray(animations[i], 3),\n              comparision = _animations$i[0],\n              barOneIndex = _animations$i[1],\n              barTwoIndex = _animations$i[2];\n\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style; //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 3),\n                overwrite = _animations$i2[0],\n                barOneIdx = _animations$i2[1],\n                newHeight = _animations$i2[2];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  quickSort() {\n    const _getQuickSortAnimatio = getQuickSortAnimations(this.state.array),\n          _getQuickSortAnimatio2 = _slicedToArray(_getQuickSortAnimatio, 2),\n          animations = _getQuickSortAnimatio2[0],\n          sortArray = _getQuickSortAnimatio2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i3 = _slicedToArray(animations[i], 3),\n              comparision = _animations$i3[0],\n              barOneIndex = _animations$i3[1],\n              barTwoIndex = _animations$i3[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i4 = _slicedToArray(animations[i], 3),\n              swap = _animations$i4[0],\n              barIndex = _animations$i4[1],\n              newHeight = _animations$i4[2];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  selectionSort() {\n    const _getSelectionSortAnim = getSelectionSortAnimations(this.state.array),\n          _getSelectionSortAnim2 = _slicedToArray(_getSelectionSortAnim, 2),\n          animations = _getSelectionSortAnim2[0],\n          sortArray = _getSelectionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i5 = _slicedToArray(animations[i], 3),\n              temp = _animations$i5[0],\n              barOneIndex = _animations$i5[1],\n              barTwoIndex = _animations$i5[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i6 = _slicedToArray(animations[i], 3),\n              temp = _animations$i6[0],\n              barIndex = _animations$i6[1],\n              newHeight = _animations$i6[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  insertionSort() {\n    const _getInsertionSortAnim = getInsertionSortAnimations(this.state.array),\n          _getInsertionSortAnim2 = _slicedToArray(_getInsertionSortAnim, 2),\n          animations = _getInsertionSortAnim2[0],\n          sortArray = _getInsertionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i7 = _slicedToArray(animations[i], 3),\n              temp = _animations$i7[0],\n              barOneIndex = _animations$i7[1],\n              barTwoIndex = _animations$i7[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i8 = _slicedToArray(animations[i], 3),\n              temp = _animations$i8[0],\n              barIndex = _animations$i8[1],\n              newHeight = _animations$i8[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  HeapSort() {}\n\n  bubbleSort() {\n    const _getBubbleSortAnimati = getBubbleSortAnimations(this.state.array),\n          _getBubbleSortAnimati2 = _slicedToArray(_getBubbleSortAnimati, 2),\n          animations = _getBubbleSortAnimati2[0],\n          sortArray = _getBubbleSortAnimati2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i9 = _slicedToArray(animations[i], 3),\n              comparision = _animations$i9[0],\n              barOneIndex = _animations$i9[1],\n              barTwoIndex = _animations$i9[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i10 = _slicedToArray(animations[i], 3),\n              swap = _animations$i10[0],\n              barIndex = _animations$i10[1],\n              newHeight = _animations$i10[2];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  render() {\n    const array = this.state.array; //const array = this.state.array;\n\n    const SORT_BUTTONS = 6;\n    const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n    return React.createElement(\"div\", {\n      className: \"array_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array_bar\",\n      key: index,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Neeche_wala_bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Generate\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.selectionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Selection Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.insertionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Insertion Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.HeapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Bubble Sort\")));\n  }\n\n} //function for random numbers :\n\n\nfunction randomIntformIntervals(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} //for checking algos\n\n\nfunction arrayArequals(arrOne, arrtwo) {\n  if (arrOne.length !== arrtwo.length) return false;\n\n  for (let i = 0; i < arrOne.length; i++) {\n    if (arrOne[i] !== arrtwo[i]) return false;\n  }\n\n  return true;\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/mohitsinha/Downloads/Sorting-Visualizer-master/src/SortingVisualizer/SortingVisualizer.js"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","getBubbleSortAnimations","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntformIntervals","setState","mergeSort","animations","sortArray","console","log","length","isColorChange","arrayBars","document","getElementsByClassName","comparision","barOneIndex","barTwoIndex","color","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","overwrite","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","quickSort","swap","barIndex","barStyle","selectionSort","temp","insertionSort","HeapSort","bubbleSort","render","SORT_BUTTONS","TOTAL_BUTTONS","map","value","index","min","max","Math","floor","random","arrayArequals","arrOne","arrtwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualisa.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort';\n//import {getHeapSortAnimations} from '../SortingAlgorithms/';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/quickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/insertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/selectionsort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/bubblesort';\n\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\n\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 5; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array : [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for(let i = 0; i < 350; i++) {\n            array.push(randomIntformIntervals(5, 600));\n        }\n        this.setState({array});\n    }\n    mergeSort() {\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                setTimeout(() => {\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    }\n    quickSort() {\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    }\n\n    selectionSort() {\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    }\n\n    insertionSort() {\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    }\n\n    HeapSort() {\n\n    }\n\n    bubbleSort() {\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    }\n\n    \n\n\n    render() {\n        const {array} = this.state;\n        //const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return (\n            <div className=\"array_container\">\n                {array.map((value, index) => (\n                    <div \n                    className=\"array_bar\" \n                    key={index}\n                    style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}>\n                    </div>\n                ))}\n                <div className=\"Neeche_wala_bar\">\n                    <button className=\"buttons\" onClick={() => this.resetArray()}>Generate</button>\n                    <button className=\"buttons\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button className=\"buttons\" onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button className=\"buttons\" onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button className=\"buttons\" onClick={() => this.insertionSort()}>Insertion Sort</button>\n                    <button className=\"buttons\" onClick={() => this.HeapSort()}>Heap Sort</button>\n                    <button className=\"buttons\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n//function for random numbers :\nfunction randomIntformIntervals(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n//for checking algos\nfunction arrayArequals(arrOne, arrtwo) {\n    if(arrOne.length !== arrtwo.length) return false;\n    for(let i = 0; i < arrOne.length; i++) {\n        if(arrOne[i] !== arrtwo[i]) return false;\n    }\n    return true;\n}\n\nexport default SortingVisualizer;\n"]},"metadata":{},"sourceType":"module"}