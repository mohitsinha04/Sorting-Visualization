{"ast":null,"code":"import _slicedToArray from \"/Users/mohitsinha/Downloads/Sorting-Visualizer-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mohitsinha/Downloads/Sorting-Visualizer-master/src/SortingVisualizer/SortingVisualizer.js\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/MergeSort';\nimport { getHeapSortAnimations } from '../SortingAlgorithms/HeapSort';\nimport { getQuickSortAnimations } from '../SortingAlgorithms/QuickSort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/InsertionSort';\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/SelectionSort';\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/BubbleSort'; //Changing width,height accordingly with the browser\n\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = 58;\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\n\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\n\nconst ANIMATION_SPEED_MS = 5; //Animation Speed (how fast color changes, how fast height gets overwritten)\n//Tooltips for buttons\n\nconst DISABLED_BUTTON = \"Currently Disabled\";\nconst ENABLED_BUTTON = {\n  nlogn: \"O(NlogN) Time Complexity\",\n  nSquare: \"O(N^2) Time Complexity\"\n};\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  } //Generates new random array \n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(200 + 10 * i); //pushing sorted increasing array\n      // array.push(500 - 5 * i); //pushing sorted decreasing array\n      array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30)); //random array\n    }\n\n    this.setState({\n      array: array\n    });\n    this.restoreStoreButtons();\n  }\n\n  disableSortButtons() {\n    document.getElementById(\"mergeSort\").disabled = true;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"quickSort\").disabled = true;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"insertionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"selectionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n    document.getElementById(\"bubbleSort\").disabled = true;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n  }\n\n  restoreStoreButtons() {\n    document.getElementById(\"mergeSort\").disabled = false;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"quickSort\").disabled = false;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"bubbleSort\").disabled = false;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"selectionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n    document.getElementById(\"insertionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n  } //Sorting Algorithms\n\n\n  mergeSort() {\n    this.disableSortButtons();\n\n    const _getMergeSortAnimatio = getMergeSortAnimations(this.state.array),\n          _getMergeSortAnimatio2 = _slicedToArray(_getMergeSortAnimatio, 2),\n          animations = _getMergeSortAnimatio2[0],\n          sortArray = _getMergeSortAnimatio2[1];\n\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const _animations$i = _slicedToArray(animations[i], 3),\n              comparision = _animations$i[0],\n              barOneIndex = _animations$i[1],\n              barTwoIndex = _animations$i[2];\n\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style; //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 3),\n                overwrite = _animations$i2[0],\n                barOneIdx = _animations$i2[1],\n                newHeight = _animations$i2[2];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  quickSort() {\n    this.disableSortButtons();\n\n    const _getQuickSortAnimatio = getQuickSortAnimations(this.state.array),\n          _getQuickSortAnimatio2 = _slicedToArray(_getQuickSortAnimatio, 2),\n          animations = _getQuickSortAnimatio2[0],\n          sortArray = _getQuickSortAnimatio2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i3 = _slicedToArray(animations[i], 3),\n              comparision = _animations$i3[0],\n              barOneIndex = _animations$i3[1],\n              barTwoIndex = _animations$i3[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i4 = _slicedToArray(animations[i], 3),\n              swap = _animations$i4[0],\n              barIndex = _animations$i4[1],\n              newHeight = _animations$i4[2];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  bubbleSort() {\n    this.disableSortButtons();\n\n    const _getBubbleSortAnimati = getBubbleSortAnimations(this.state.array),\n          _getBubbleSortAnimati2 = _slicedToArray(_getBubbleSortAnimati, 2),\n          animations = _getBubbleSortAnimati2[0],\n          sortArray = _getBubbleSortAnimati2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i5 = _slicedToArray(animations[i], 3),\n              comparision = _animations$i5[0],\n              barOneIndex = _animations$i5[1],\n              barTwoIndex = _animations$i5[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i6 = _slicedToArray(animations[i], 3),\n              swap = _animations$i6[0],\n              barIndex = _animations$i6[1],\n              newHeight = _animations$i6[2];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  insertionSort() {\n    this.disableSortButtons();\n\n    const _getInsertionSortAnim = getInsertionSortAnimations(this.state.array),\n          _getInsertionSortAnim2 = _slicedToArray(_getInsertionSortAnim, 2),\n          animations = _getInsertionSortAnim2[0],\n          sortArray = _getInsertionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i7 = _slicedToArray(animations[i], 3),\n              temp = _animations$i7[0],\n              barOneIndex = _animations$i7[1],\n              barTwoIndex = _animations$i7[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i8 = _slicedToArray(animations[i], 3),\n              temp = _animations$i8[0],\n              barIndex = _animations$i8[1],\n              newHeight = _animations$i8[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  selectionSort() {\n    this.disableSortButtons();\n\n    const _getSelectionSortAnim = getSelectionSortAnimations(this.state.array),\n          _getSelectionSortAnim2 = _slicedToArray(_getSelectionSortAnim, 2),\n          animations = _getSelectionSortAnim2[0],\n          sortArray = _getSelectionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i9 = _slicedToArray(animations[i], 3),\n              temp = _animations$i9[0],\n              barOneIndex = _animations$i9[1],\n              barTwoIndex = _animations$i9[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i10 = _slicedToArray(animations[i], 3),\n              temp = _animations$i10[0],\n              barIndex = _animations$i10[1],\n              newHeight = _animations$i10[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  render() {\n    const array = this.state.array; //const array = this.state.array;\n\n    const SORT_BUTTONS = 6;\n    const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n    return React.createElement(\"div\", {\n      className: \"array_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, array.map((value, index) => React.createElement(\"div\", {\n      className: \"array_bar\",\n      key: index,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Neeche_wala_bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Generate\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.selectionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Selection Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.insertionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Insertion Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.HeapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Bubble Sort\")));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["/Users/mohitsinha/Downloads/Sorting-Visualizer-master/src/SortingVisualizer/SortingVisualizer.js"],"names":["React","getMergeSortAnimations","getHeapSortAnimations","getQuickSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","getBubbleSortAnimations","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","DISABLED_BUTTON","ENABLED_BUTTON","nlogn","nSquare","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","restoreStoreButtons","disableSortButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","mergeSort","animations","sortArray","console","log","length","isColorChange","arrayBars","getElementsByClassName","comparision","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","overwrite","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","quickSort","swap","barIndex","barStyle","bubbleSort","insertionSort","temp","selectionSort","render","SORT_BUTTONS","TOTAL_BUTTONS","map","value","index","HeapSort","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = 58;\n\n\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 5; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            // array.push(200 + 10 * i); //pushing sorted increasing array\n            // array.push(500 - 5 * i); //pushing sorted decreasing array\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-30)); //random array\n        }\n        this.setState({array: array});\n        this.restoreStoreButtons();\n    }\n    disableSortButtons() {\n        document.getElementById(\"mergeSort\").disabled = true;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#000000\";\n    }\n    restoreStoreButtons() {\n        document.getElementById(\"mergeSort\").disabled = false;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#47535E\";\n        buttonStyle.cursor = \"pointer\";\n    }\n    //Sorting Algorithms\n    mergeSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    quickSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    bubbleSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    insertionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    selectionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    render() {\n        const {array} = this.state;\n        //const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return (\n            <div className=\"array_container\">\n                {array.map((value, index) => (\n                    <div \n                    className=\"array_bar\" \n                    key={index}\n                    style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}>\n                    </div>\n                ))}\n                <div className=\"Neeche_wala_bar\">\n                    <button className=\"buttons\" onClick={() => this.resetArray()}>Generate</button>\n                    <button className=\"buttons\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button className=\"buttons\" onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button className=\"buttons\" onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button className=\"buttons\" onClick={() => this.insertionSort()}>Insertion Sort</button>\n                    <button className=\"buttons\" onClick={() => this.HeapSort()}>Heap Sort</button>\n                    <button className=\"buttons\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n\n\n"]},"metadata":{},"sourceType":"module"}